<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
   <HEAD>
      <TITLE>
         Integrating FastCGI with Perl-5
      </TITLE>
<STYLE TYPE="text/css">
 body {
  background-color: #FFFFFF;
  color: #000000;
 }
 :link { color: #cc0000 }
 :visited { color: #555555 }
 :active { color: #000011 }
 p.c3 {text-align: center}
 h5.c2 {text-align: center}
 div.c1 {text-align: center}
</STYLE>
   </HEAD>
   <BODY>
      <DIV CLASS="c1">
         <A HREF="http://fastcgi.com"><IMG BORDER="0" SRC="../images/fcgi-hd.gif" ALT="[[FastCGI]]"></A>
      </DIV>
      <BR CLEAR="all">
      <DIV CLASS="c1">
         <H3>
            Integrating FastCGI with Perl-5
         </H3>
      </DIV>
      <!--Copyright (c) 1996 Open Market, Inc.                                    -->
      <!--See the file "LICENSE.TERMS" for information on usage and redistribution-->
      <!--of this file, and for a DISCLAIMER OF ALL WARRANTIES.                   -->
      <H5 CLASS="c2">
         Copyright &copy; 1996 Open Market, Inc. 245 First Street, Cambridge, MA 02142 U.S.A.<BR>
         Tel: 617-949-7000 URL: <A HREF="http://www.openmarket.com/">http://www.openmarket.com/</A><BR>
         $Id: fcgi-perl.htm,v 1.3 2001/11/27 01:03:47 robs Exp $<BR>
      </H5>
      <HR>
      <UL TYPE="square">
         <LI>
            <A HREF="#S1">1. Introduction</A>
         </LI>
         <LI>
            <A HREF="#S2">2. Perl with sfio and an FCGI module</A>
         </LI>
         <LI>
            <A HREF="#S3">3. Perl with fcgi_stdio and an FCGI module</A> 
            <UL TYPE="square">
               <LI>
                  <A HREF="#S3.1">3.1 Basic recipe</A>
               </LI>
               <LI>
                  <A HREF="#S3.2">3.2 Semi-advanced recipe</A>
               </LI>
               <LI>
                  <A HREF="#S3.3">3.3 Advanced recipe</A>
               </LI>
            </UL>
         </LI>
         <LI>
            <A HREF="#S4">4. Writing FastCGI applications in Perl</A>
         </LI>
      </UL>
      <H3>
         <A NAME="S1">1. Introduction</A>
      </H3>
      <P>
         Perl (Practical Extraction and Report Language) is a scripting language that is often used for CGI
         programming. Perl is freely available as a source kit.
      </P>
      <P>
         FastCGI has been integrated with Perl in two different ways:
      </P>
      <OL>
         <LI>
            By writing a module that plugs into any Perl interpreter that&#39;s been built with sfio, a stdio
            alternative from AT&amp;T.
         </LI>
         <LI>
            By writing a module that plugs into any Perl interpreter that&#39;s been built with FastCGI&#39;s
            fcgi_stdio library layering over stdio. The first approach, implemented by Sven Verdoolaege
            (skimo@breughel.ufsia.ac.be), is probably the better of the two, since sfio is a generally useful addition
            to Perl. The second approach, implemented by engineers at Open Market, predates the availability of an
            sfio-integrated Perl and demonstrates that the fcgi_stdio library can be used with a substantial C
            application.
            <P>
               The two approaches are compatible at the Perl source code level; a Perl application developed using one
               approach can be run using the other. And both approaches result in a general-purpose Perl interpreter,
               not a Perl interpreter that&#39;s only usable for FastCGI applications.
            </P>
            <P>
               This memo documents both approaches and explains a small Perl FastCGI application.
            </P>
            <P>
            </P>
            <H3>
               <A NAME="S2">2. Perl with sfio and an FCGI module</A>
            </H3>
            As of release 5 patch 3 subpatch 2 (5.003.02), Perl has announced an optional support for sfio (safe/fast
            string/file I/O), which is an alternative to stdio that AT&amp;T distributes freely. An advantage of sfio
            over stdio is that sfio provides the ability to implement new stream classes that don&#39;t simply transfer
            sequential bytes to or from a file descriptor. This flexibility is exactly what FastCGI needs in order to
            implement the standard I/O streams in a manner that&#39;s transparent to applications.
            <P>
               Perl interpreters incorporating sfio are not widely available in binary form, so most likely you&#39;ll
               have to build your own. Your build should go smoothly if you follow the instructions below. The
               instructions assume:
            </P>
            <P>
            </P>
            <UL>
               <LI>
                  You are building Perl 5.0 patch level 3 subpatch level 2 (5.003.02) or higher. That&#39;s the first
                  Perl release to support sfio.<BR>
                  <BR>
               </LI>
            </UL>
            <P>
               Follow these steps to build a Perl with sfio:
            </P>
            <P>
            </P>
            <OL>
               <LI>
                  Obtain sfio source code from <A HREF=
                  "ftp://ftp.funet.fi/pub/languages/perl/CPAN/src/misc">ftp://ftp.funet.fi/pub/languages/perl/CPAN/src/misc</A>
                  <P>
                  </P>
               </LI>
               <LI>
                  Unpack the tar file using <TT>tar xvf</TT> command. <EM>$sfio</EM> will be used as a shorthand for
                  the directory in which sfio package is installed.
                  <P>
                  </P>
               </LI>
               <LI>
                  Update your $PATH variable as specified in <TT>$sfio/README</TT> and run <TT>make</TT> command in the
                  <TT>$sfio/src/lib/sfio</TT> subdirectory.
                  <P>
                  </P>
               </LI>
               <LI>
                  Rename or delete the file <TT>$sfio/include/stdio.h</TT>, since it may interfere in the further build
                  process.
                  <P>
                  </P>
               </LI>
               <LI>
                  Obtain Perl source (version 5 subversion 003 patchlevel 2 or higher) from <A HREF=
                  "http://fohnix.metronet.com/perlinfo/source/5.0/unsupported">http://fohnix.metronet.com/perlinfo/source/5.0/unsupported</A>
                  <P>
                  </P>
               </LI>
               <LI>
                  Unpack the tar file using <TT>tar xvf</TT> command. <EM>$perl</EM> is used as a shorthand for the
                  directory that is created.
                  <P>
                  </P>
               </LI>
               <LI>
                  Configure, build, and install Perl as follows: 
<PRE>
% cd $perl
% ./Configure -Duseperlio -Dusesfio
% make 
% make test
% make install
</PRE>
                  <P>
                     There are certain Configure questions that must be answered differently when building Perl with
                     sfio:
                  </P>
                  <P>
                  </P>
                  <DL>
                     <DT>
                        <EM>Perl5 can now use alternate file IO mechanisms to ANSI stdio. However these are
                        experimental and may cause problems with some extension modules. Use stdio as with previous
                        versions? [y]</EM>
                     </DT>
                     <DD>
                        You should answer no.
                     </DD>
                     <DD>
                        <P>
                        </P>
                     </DD>
                     <DT>
                        <EM>Any additional cc flags?</EM>
                     </DT>
                     <DD>
                        You should use the following cc flags along with any defaults that Perl Configure supplied: 
                        <UL>
                           <LI>
                              <STRONG>-I<EM>$sfio</EM>/include</STRONG>
                           </LI>
                        </UL>
                     </DD>
                     <DD>
                        <P>
                        </P>
                     </DD>
                     <DT>
                        <EM>Any additional ld flags (NOT including libraries):</EM>
                     </DT>
                     <DD>
                        You should specify the following <TT>ld</TT> flags: 
                        <UL>
                           <LI>
                              <STRONG>-L<EM>$sfio</EM>/lib</STRONG>
                           </LI>
                        </UL>
                     </DD>
                     <DD>
                        <P>
                        </P>
                     </DD>
                     <DT>
                        <EM>Additional Libraries:</EM>
                     </DT>
                     <DD>
                        Check that <STRONG>-lsfio</STRONG> is one of the specified libraries. Press return key to
                        continue.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                  </DL>
                  <B>NOTE</B>: If you did not install Perl as a root user, make sure to correctly set environment
                  variable <TT>PERL5LIB</TT> to indicate the location of Perl libraries. For example, if you installed
                  Perl binary into the <TT>$INSTALL</TT> subdirectory and you are running Solaris, the following will
                  set your proper library path: 
<PRE>
% setenv PERL5LIB $INSTALL/lib:$INSTALL/lib/sun4-solaris/perl5.003_02
</PRE>
                  <P>
                  </P>
               </LI>
               <LI>
                  Obtain Perl/Sfio module for FastCGI support from <A HREF=
                  "ftp://ftp.funet.fi/pub/languages/perl/CPAN/authors/id/SKIMO">ftp://ftp.funet.fi/pub/languages/perl/CPAN/authors/id/SKIMO</A>
                  <P>
                  </P>
               </LI>
               <LI>
                  Unpack FCGI module using <TT>tar</TT> command. We use <TT>$sfiomod</TT> to denote the subdirectory
                  that is created in the process.
                  <P>
                  </P>
               </LI>
               <LI>
                  Build and install the module with the following commands: 
<PRE>
% cd $sfiomod
% $INSTALL/bin/perl Makefile.PL
% make
% make test
% make install
</PRE>
               </LI>
            </OL>
            <H3>
               <A NAME="S3">3. Perl with fcgi_stdio and an FCGI module</A>
            </H3>
            <H4>
               <A NAME="S3.1">3.1 Basic recipe</A>
            </H4>
            Here are the assumptions embedded in the following recipe: 
            <UL>
               <LI>
                  You are building Perl 5.0 Patch 2 (5.002) or higher, since all examples that are provided are based
                  on that release. <BR>
                  <BR>
               </LI>
               <LI>
                  You have gcc version 2.7 installed on your system, and use it in the build. gcc is convenient because
                  it supports the <TT>-include</TT> command-line option that instructs the C preprocessor to include a
                  specific file before processing any other include files. This allows you to include
                  <TT>fcgi_stdio.h</TT> without modifying Perl source files. (The reason for specifying gcc version 2.7
                  is that I have experienced bad behavior with an earlier version and the <TT>-include</TT> flag -- the
                  C preprocessor died with SIGABRT.) <BR>
                  <BR>
               </LI>
               <LI>
                  <EM>$fcgi</EM> is used as shorthand for the full path of the FastCGI developers kit.
               </LI>
            </UL>
            <P>
               If those are valid assumptions, follow these steps:
            </P>
            <OL>
               <LI>
                  Pull the Perl source kit from <A HREF=
                  "http://www.metronet.com/perlinfo/src/latest.tar.gz">http://www.metronet.com/perlinfo/src/latest.tar.gz</A>
                  
                  <P>
                     There are good sources of information on Perl at:
                  </P>
                  <UL>
                     <LI>
                        <A HREF="http://www.perl.com/">http://www.perl.com/</A>
                     </LI>
                     <LI>
                        <A HREF="http://www.metronet.com/perlinfo/">http://www.metronet.com/perlinfo/</A>
                     </LI>
                  </UL>
                  <BR>
                  <BR>
               </LI>
               <LI>
                  Unpack the tar file in the parent directory of the FastCGI kit directory, so that the perl directory
                  is a sibling of <TT>fcgi-devel-kit</TT>. <EM>$perl</EM> is used as shorthand for the full path of the
                  directory in which Perl is installed. <BR>
                  <BR>
               </LI>
               <LI>
                  Copy the version specific and the common files from <TT>fcgi-devel-kit/perl-5</TT> into the Perl-5
                  kit. 
<PRE>
&gt; cd $perl
&gt; mv perl.c perl.c.orig
&gt; mv proto.h proto.h.orig
&gt; mv Configure Configure.orig
&gt; cp -r ../fcgi-devel-kit/perl-5/perl5.002/* .
&gt; cp -r ../fcgi-devel-kit/perl-5/common/* .
</PRE>
                  <P>
                     The files you are copying contain the Perl-5 FCGI extension, some files modified from the
                     distribution, and a script to simplify the configuration process.
                  </P>
               </LI>
               <LI>
                  Set environment variables. The Perl-5 FastCGI configuration process requires that the environment
                  variable <TT>FCGIDIR</TT> be set to the top level directory of the FastCGI development kit. 
<PRE>
&gt; setenv FCGIDIR <EM>$fcgi</EM>
</PRE>
                  If you do not want to use <TT>gcc</TT> to build Perl you can set the environment variable <TT>CC</TT>
                  to the desired compiler. For example: 
<PRE>
&gt; setenv CC gcc2.7
</PRE>
                  By default Perl&#39;s installation prefix is /usr/local, so binaries get installed in /usr/local/bin,
                  library files get installed into /usr/local/lib/perl, etc. If you want to specify a different
                  installation prefix set the environment variable <TT>PERL_PREFIX</TT>. 
<PRE>
&gt; setenv PERL_PREFIX /usr/local/perl5-fcgi
</PRE>
               </LI>
               <LI>
                  Run fcgi-configure. 
<PRE>
&gt; ./fcgi-configure
</PRE>
                  <P>
                     <TT>fcgi-configure</TT> is a wrapper around Perl&#39;s <TT>Configure</TT> script. It sets some
                     variables according the the value of some environment variables, and runs Perl&#39;s
                     <TT>Configure</TT> script in such a way that it does not prompt the user for any input. 90% of the
                     time this should work without a problem. If for some reason this does not work for you, you&#39;ll
                     have to follow the steps in the next section.
                  </P>
                  <BR>
                  <BR>
               </LI>
               <LI>
                  Run make. 
<PRE>
&gt; make
</PRE>
               </LI>
               <LI>
                  Install the newly built Perl-5. 
<PRE>
&gt; make install
</PRE>
               </LI>
            </OL>
            <P>
            </P>
            <H4>
               <A NAME="S3.2">3.2 Semi-advanced recipe</A>
            </H4>
            If you do not have experience configuring and building Perl, you should find someone who does. Perl can be
            pretty intimidating to configure since it asks you a large number of irrelevant-seeming questions that you
            won&#39;t know how to answer.<BR>
            <BR>
            <BR>
            <BR>
            <OL>
               <LI>
                  Go into the top level directory of the Perl distribution and run <TT>Configure</TT>. 
<PRE>
&gt; cd $perl
&gt; ./Configure
</PRE>
               </LI>
               <LI>
                  There are some questions that you are going to have to answer differently when building FastCGI into
                  Perl. These are described below: <BR>
                  <BR>
                  <DL>
                     <DT>
                        <EM>Use which C compiler?</EM>
                     </DT>
                     <DD>
                        You should specify <TT>gcc</TT>.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>Any additional cc flags?</EM>
                     </DT>
                     <DD>
                        You should use the following cc flags along with any defaults that Perl Configure supplied: 
                        <UL>
                           <LI>
                              <STRONG>-I<EM>$fcgi</EM>/include</STRONG>
                           </LI>
                           <LI>
                              <STRONG>-include <EM>$fcgi</EM>/include/fcgi_stdio.h</STRONG>
                           </LI>
                        </UL>
                        This assumes you are using GCC.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>Any additional ld flags (NOT including libraries):</EM>
                     </DT>
                     <DD>
                        You should specify the following <TT>ld</TT> flags: 
                        <UL>
                           <LI>
                              <STRONG>-L<EM>$fcgi</EM>/libfcgi</STRONG>
                           </LI>
                        </UL>
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>Additional Libraries:</EM>
                     </DT>
                     <DD>
                        add <STRONG>-lfcgi</STRONG> to the list of additional libraries. It should be added before -lc.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>What extensions do you wish to load dynamically?</EM>
                     </DT>
                     <DD>
                        If you can support dynamic extensions, <TT>Configure</TT> will ask which of the supplied
                        extensions should be loaded dynamically. Since we copied the FCGI extension into the Perl
                        source directory it should be one of the ones in the default list. If you want FCGI to be
                        dynamically loaded you should specify it here, otherwise leave it out.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>What extensions do you wish to load statically?</EM>
                     </DT>
                     <DD>
                        If you do not support Dynamic extensions this is the only question about extensions you would
                        get asked. You should specify FCGI here if you did not get asked about dynamic extensions (or
                        did not specify FCGI as a dynamic extension).
                     </DD>
                  </DL>
                  <BR>
                  <BR>
               </LI>
               <LI>
                  Copy in the new <TT>proto.h</TT>. 
                  <P>
                     The file proto.h has some macros that conflict with the FastCGI macros. The version of
                     <TT>proto.h</TT> supplied in the FastCGI kit includes these changes:
                  </P>
                  <BR>
                  <BR>
                  <UL>
                     <LI>
                        At the beginning of the file it adds the following lines: 
<PRE>
#ifdef _FCGI_STDIO
#undef printf
#endif
</PRE>
                     </LI>
                     <LI>
                        At the bottom it adds: 
<PRE>
#ifdef _FCGI_STDIO
#define printf FCGI_printf
#endif
</PRE>
                     </LI>
                  </UL>
               </LI>
               <LI>
                  Copy in the new <TT>perl.c</TT>. 
                  <P>
                     Perl-5.002 has a bug in <TT>perl.c</TT> that has a great chance of getting exercised with FastCGI.
                     A fix has been sumbitted to the Perl developers and hopefully it&#39;ll make it into perl-5.003.
                     It was a one line fix, here is a diff for the curious:
                  </P>
<PRE>
*** perl.c      1996/03/15 17:10:10     1.1
--- perl.c      1996/03/15 17:11:23
***************
*** 405,410 ****
--- 405,411 ----
      if (e_fp) {
 if (Fflush(e_fp) || ferror(e_fp) || fclose(e_fp))
     croak(&quot;Can&#39;t write to temp file for -e: %s&quot;, Strerror(errno));
+ e_fp = Nullfp;
 argc++,argv--;
 scriptname = e_tmpname;
      }
</PRE>
                  Pretty straightforward.<BR>
                  <BR>
               </LI>
               <LI>
                  Build and install Perl. 
<PRE>
&gt; make
<EM>[...]</EM>
&gt; make install
</PRE>
                  <BR>
                  <BR>
                  <H4>
                     <A NAME="S3.3">3.3 Advanced recipe</A>
                  </H4>
                  <P>
                     If you already have a Perl-5 package that has been configured, and you do not really want to
                     re-run Configure, you can take the following steps.
                  </P>
                  <P CLASS="c3">
                     <STRONG>THIS IS NOT RECOMMENDED</STRONG>
                  </P>
                  <P>
                     Edit config.sh with your favorite editor and modify the following lines:
                  </P>
                  <DL>
                     <DT>
                        <EM>cc</EM>
                     </DT>
                     <DD>
                        Change to use gcc if you are not using it already.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>ccflags</EM> AND <EM>cppflags</EM>
                     </DT>
                     <DD>
                        Add the following flags: 
                        <UL>
                           <LI>
                              <STRONG>-I<EM>$fcgi</EM>/include</STRONG>
                           </LI>
                           <LI>
                              <STRONG>-include <EM>$fcgi</EM>/include/fcgi_stdio.h</STRONG>
                           </LI>
                        </UL>
                        This assumes you are using GCC. See the above section on assumptions
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>extensions</EM> AND <EM>known_extensions</EM>
                     </DT>
                     <DD>
                        Add FCGI to the list of extensions
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>ldflags</EM>
                     </DT>
                     <DD>
                        Add -L $fcgi/libfcgi to the list.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>libs</EM>
                     </DT>
                     <DD>
                        Add -lfcgi to the list of libraries, should be added before -lc.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>static_ext</EM> <STRONG>or</STRONG> <EM>dynamic_ext</EM>
                     </DT>
                     <DD>
                        Add FCGI to the list of statically or dynamically loaded extensions.
                     </DD>
                     <DD>
                        <BR>
                        <BR>
                     </DD>
                     <DT>
                        <EM>d_stdio_cnt_lval, d_stdio_ptr_lval, d_stdiobase, d_stdstdio</EM>
                     </DT>
                     <DD>
                        <DL>
                           <DT>
                              Change all of these to undef.
                           </DT>
                        </DL>
                        <P>
                           One you have edited config.sh you should do a &quot;make Makefile depend all&quot;. If
                           you&#39;re paranoid like me you may want to do a &quot;make clean&quot; first.
                        </P>
                        <H3>
                           <A NAME="S4">4. Writing FastCGI applications in Perl</A>
                        </H3>
                        <P>
                           The Perl program <TT>examples/tiny-perl-fcgi</TT> performs the same function as the C
                           program <TT>examples/tiny-fcgi</TT> that&#39;s used as an example in the <A HREF=
                           "fcgi-devel-kit.htm#S3.1.1">FastCGI Developer&#39;s Kit</A>. Here&#39;s what the Perl
                           version looks like:
                        </P>
<PRE>
#!./perl
use FCGI;
$count = 0;
while(FCGI::accept() &gt;= 0) {
    print(&quot;Content-type: text/html\r\n\r\n&quot;,
          &quot;&lt;title&gt;FastCGI Hello! (Perl)&lt;/title&gt;\n&quot;,
          &quot;&lt;h1&gt;FastCGI Hello! (Perl)&lt;/h1&gt;\n&quot;,
          &quot;Request number &quot;, $++count,
          &quot; running on host &lt;i&gt;$ENV(&#39;SERVER_NAME&#39;)&lt;/i&gt;&quot;);
}
</PRE>
                        If you&#39;ve built Perl according to the recipe and you have a Web server set up to run
                        FastCGI applications, load the FastCGI Developer&#39;s Kit Index Page in that server and run
                        this Perl application now. 
                        <P>
                           The script invokes Perl indirectly via the symbolic link <TT>examples/perl</TT>. It does
                           this because HP-UX has a limit of 32 characters for the first line of a command-interpreter
                           file such as <TT>examples/tiny-perl-fcgi</TT>. If you run on HP-UX you won&#39;t want to
                           sprinkle symbolic links to perl everywhere, so you should choose a <TT>PERL_PREFIX</TT>
                           shorter than <TT>/usr/local/perl5-fcgi</TT>.
                        </P>
                        <P>
                           You need to be aware of the following bug. If the initial environment to a FastCGI Perl
                           application is empty (contains no name-value pairs) then when the first call to
                           <TT>FCGI::accept</TT> returns, the environment will <I>still</I> be empty, i.e.
                           <TT>%ENV</TT> will contain no associations. All the variables associated with the first
                           request are lost. There are two known workarounds:
                        </P>
                        <P>
                        </P>
                        <UL>
                           <LI>
                              In your Perl application, enumerate <TT>%ENV</TT> using <TT>each</TT> before entering the
                              <TT>FCGI::accept</TT> loop. The program <TT>examples/tiny-perl-fcgi</TT> contains code
                              for this. 
                              <P>
                              </P>
                           </LI>
                           <LI>
                              In configuring your application be sure to set at least one initial environment variable.
                              You do this with the <TT>AppClass -initial-env</TT> directive to the Web server, or by
                              running <TT>cgi-fcgi</TT> in a non-empty environment.
                           </LI>
                        </UL>
                        <P>
                           The Perl subroutine <TT>FCGI::accept</TT> treats the initial environment differently than
                           the C function <TT>FCGI_Accept</TT>. The first call to the C function <TT>FCGI_Accept</TT>
                           replaces the initial environment with the environment of the first request. The first call
                           to the Perl subroutine <TT>FCGI::accept</TT> adds the variable bindings of the first request
                           to the bindings present in the initial environment. So when the first call to
                           <TT>FCGI::accept</TT> returns, bindings from the initial environment are still there
                           (unless, due to naming conflicts, some of them have been overwritten by the first request).
                           The next call to <TT>FCGI::accept</TT> removes the bindings made on the previous call before
                           adding a new set for the request just accepted, again preserving the initial environment.
                        </P>
                        <P>
                           The Perl <TT>FCGI</TT> module also includes subroutines <TT>FCGI::finish</TT>,
                           <TT>FCGI::set_exit_status</TT>, and <TT>FCGI::start_filter_data</TT> that correspond to C
                           functions in <TT>fcgi_stdio.h</TT>; see the manpages for full information.
                        </P>
                        <P>
                           Converting a Perl CGI application to FastCGI is not fundamentally different from converting
                           a C CGI application. You separate the portion of the application that performs one-time
                           initialization from the portion that performs per-request processing. You put the
                           per-request processing into a loop controlled by <TT>FCGI::accept</TT>.
                        </P>
                        <P>
                        </P>
                     </DD>
                  </DL>
               </LI>
            </OL>
         </LI>
      </OL>
   </BODY>
</HTML>

